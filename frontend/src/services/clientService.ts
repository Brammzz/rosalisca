import axios from 'axios';

const API_URL = `${import.meta.env.VITE_API_URL}/clients`;

// Define the structure of the Client object, matching the backend model
export interface Client {
  _id: string;
  name: string;
  description: string;
  category: 'government' | 'private' | 'bumn' | 'international' | 'state-owned';
  logo: string;
  website?: string;
  projectCount: number;
  status: 'active' | 'inactive';
  contactInfo?: {
    email?: string;
    phone?: string;
    address?: string;
  };
  industry?: string;
  establishedYear?: number;
  revenue?: string;
  employeeCount?: string;
  tags?: string[];
  notes?: string;
  lastProjectDate?: string;
  satisfaction?: {
    rating?: number;
    feedback?: string;
  };
  createdAt: string;
  updatedAt: string;
  formattedProjectCount?: string;
}

export interface ClientFilters {
  category?: string;
  search?: string;
  status?: string;
  page?: number;
  limit?: number;
}

export interface ClientResponse {
  success: boolean;
  data: Client[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
  statistics: {
    total: number;
    government: number;
    private: number;
    bumn: number;
    totalProjects: number;
  };
}

export interface ClientStatsResponse {
  success: boolean;
  data: {
    total: number;
    byCategory: {
      [key: string]: {
        count: number;
        totalProjects: number;
        avgSatisfaction: number;
      };
    };
    recent: Client[];
    topClients: Client[];
  };
}

// Type for creating a new client (omitting fields generated by backend)
export type NewClientData = Omit<Client, '_id' | 'createdAt' | 'updatedAt' | 'formattedProjectCount'>;

// Function to get all clients with optional filtering
export const getClientsAPI = async (filters?: ClientFilters): Promise<ClientResponse> => {
  const config = {
    params: filters || {},
  };
  const response = await axios.get(API_URL, config);
  return response.data;
};

// Function to get a single client by its ID
export const getClientByIdAPI = async (id: string): Promise<{ success: boolean; data: Client }> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};

// Function to create a new client
export const createClientAPI = async (
  clientData: Partial<NewClientData>,
  token: string
): Promise<{ success: boolean; data: Client; message: string }> => {
  const config = {
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
  };
  const response = await axios.post(API_URL, clientData, config);
  return response.data;
};

// Function to create a new client with file upload
export const createClientWithFileAPI = async (
  clientData: Partial<NewClientData>,
  file: File | null,
  token: string
): Promise<{ success: boolean; data: Client; message: string }> => {
  const formData = new FormData();
  
  // Debug log
  console.log('Creating client with file:', file?.name, file?.size, file?.type);
  console.log('Client data:', clientData);
  
  // Add client data to form data
  Object.keys(clientData).forEach(key => {
    const value = clientData[key as keyof NewClientData];
    if (value !== undefined && value !== null) {
      if (typeof value === 'object') {
        formData.append(key, JSON.stringify(value));
      } else {
        formData.append(key, value.toString());
      }
    }
  });

  // Add file if provided
  if (file) {
    formData.append('logo', file);
    console.log('File added to FormData:', file.name);
  } else {
    console.log('No file provided');
  }

  const config = {
    headers: {
      // Don't set Content-Type for FormData, let browser set it with boundary
      Authorization: `Bearer ${token}`,
    },
  };
  
  console.log('Sending request to:', API_URL);
  const response = await axios.post(API_URL, formData, config);
  console.log('Response:', response.data);
  return response.data;
};

// Function to update a client
export const updateClientAPI = async (
  id: string,
  clientData: Partial<NewClientData>,
  token: string
): Promise<{ success: boolean; data: Client; message: string }> => {
  const config = {
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
  };
  const response = await axios.put(`${API_URL}/${id}`, clientData, config);
  return response.data;
};

// Function to update a client with file upload
export const updateClientWithFileAPI = async (
  id: string,
  clientData: Partial<NewClientData>,
  file: File | null,
  token: string
): Promise<{ success: boolean; data: Client; message: string }> => {
  const formData = new FormData();
  
  // Add client data to form data
  Object.keys(clientData).forEach(key => {
    const value = clientData[key as keyof NewClientData];
    if (value !== undefined && value !== null) {
      if (typeof value === 'object') {
        formData.append(key, JSON.stringify(value));
      } else {
        formData.append(key, value.toString());
      }
    }
  });

  // Add file if provided
  if (file) {
    formData.append('logo', file);
  }

  const config = {
    headers: {
      // Don't set Content-Type for FormData, let browser set it with boundary
      Authorization: `Bearer ${token}`,
    },
  };
  
  const response = await axios.put(`${API_URL}/${id}`, formData, config);
  return response.data;
};

// Function to delete a client
export const deleteClientAPI = async (
  id: string,
  token: string
): Promise<{ success: boolean; message: string }> => {
  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  };
  const response = await axios.delete(`${API_URL}/${id}`, config);
  return response.data;
};

// Function to update client project count
export const updateClientProjectCountAPI = async (
  id: string,
  increment: boolean,
  token: string
): Promise<{ success: boolean; data: Client; message: string }> => {
  const config = {
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
  };
  const response = await axios.put(
    `${API_URL}/${id}/project-count`,
    { increment },
    config
  );
  return response.data;
};

// Function to get client statistics
export const getClientStatsAPI = async (): Promise<ClientStatsResponse> => {
  const response = await axios.get(`${API_URL}/stats`);
  return response.data;
};

// Utility function to get category label in Indonesian
export const getCategoryLabel = (category: string): string => {
  switch (category) {
    case 'government':
      return 'Pemerintah';
    case 'private':
      return 'Swasta';
    case 'bumn':
      return 'BUMN';
    default:
      return category;
  }
};

// Utility function to get category badge color
export const getCategoryBadgeColor = (category: string): string => {
  switch (category) {
    case 'government':
      return 'bg-blue-100 text-blue-800';
    case 'private':
      return 'bg-green-100 text-green-800';
    case 'bumn':
      return 'bg-orange-100 text-orange-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

// Utility function to format project count
export const formatProjectCount = (count: number): string => {
  if (count === 0) return 'Belum ada proyek';
  if (count === 1) return '1 proyek';
  return `${count} proyek`;
};

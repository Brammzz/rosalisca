import axios from 'axios';

const API_URL = `${import.meta.env.VITE_API_URL}/projects`;

interface GalleryImage {
  _id?: string;
  url: string;
  caption?: string;
  isPrimary: boolean;
}

export interface Project {
  _id: string; // MongoDB uses _id
  title: string;
  company: string;
  category: string;
  year: string;
  location: string;
  description: string;
  image: string;
  gallery?: GalleryImage[];
  status: string;
  client: string;
  duration: string;
  createdAt: string; // Timestamps from Mongoose
  updatedAt: string;
}

// Function to get all projects, with optional filtering by company
export const getProjectsAPI = async (company?: string): Promise<Project[]> => {
  const config = {
    params: company ? { company } : {},
  };
  const response = await axios.get(API_URL, config);
  
  // Handle both old format (direct array) and new format (wrapped object)
  if (response.data && typeof response.data === 'object' && response.data.data) {
    return response.data.data; // New format with wrapper
  } else if (Array.isArray(response.data)) {
    return response.data; // Old format (direct array)
  } else {
    console.warn('Unexpected response format:', response.data);
    return []; // Fallback to empty array
  }
};

// Function to get a single project by its ID
export const getProjectByIdAPI = async (id: string): Promise<Project> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};

// Type for the data needed to create a project (omitting fields generated by backend)
export type NewProjectData = Omit<Project, '_id' | 'createdAt' | 'updatedAt'>;

// Function to create a new project
export const createProjectAPI = async (
  projectData: Partial<NewProjectData>,
  token: string
): Promise<Project> => {
  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
      // Don't set Content-Type for FormData, let browser set it
    },
  };

  const response = await axios.post(API_URL, projectData, config);
  return response.data;
};

// Function to create project with file uploads
export const createProjectWithFilesAPI = async (
  formData: FormData,
  token: string
): Promise<Project> => {
  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
      'Content-Type': 'multipart/form-data',
    },
  };

  const response = await axios.post(API_URL, formData, config);
  return response.data;
};

// Function to update project with file uploads
export const updateProjectWithFilesAPI = async (
  id: string,
  formData: FormData,
  token: string
): Promise<Project> => {
  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
      'Content-Type': 'multipart/form-data',
    },
  };

  const response = await axios.put(`${API_URL}/${id}`, formData, config);
  return response.data;
};

// Function to remove image from gallery
export const removeGalleryImageAPI = async (
  projectId: string,
  imageId: string,
  token: string
): Promise<Project> => {
  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  };

  const response = await axios.delete(`${API_URL}/${projectId}/gallery/${imageId}`, config);
  return response.data.project;
};

// Function to update gallery image
export const updateGalleryImageAPI = async (
  projectId: string,
  imageId: string,
  updateData: { caption?: string; isPrimary?: boolean },
  token: string
): Promise<Project> => {
  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
  };

  const response = await axios.put(`${API_URL}/${projectId}/gallery/${imageId}`, updateData, config);
  return response.data.project;
};

// Function to update a project
export const updateProjectAPI = async (
  id: string,
  projectData: Partial<Project>,
  token: string
): Promise<Project> => {
  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
  };

  const response = await axios.put(`${API_URL}/${id}`, projectData, config);
  return response.data;
};

// Function to delete a project
export const deleteProjectAPI = async (
  id: string,
  token: string
): Promise<void> => {
  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  };

  await axios.delete(`${API_URL}/${id}`, config);
};
